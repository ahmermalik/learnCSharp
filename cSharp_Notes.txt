c# & .NET notes:


.NET Framework (Windows Only)

.NET Core (Linux, Mac, Windows, ARM)


.NET is a CLR (Common Language Runtime)
It provides you space to run your program, manage memory for it, and send the cpu information to run processes


Mac 'intellisense'
command + . will display the actions that can be used for that specific type.
Windows
Control + . will display the actions that can be used for that specific type.

Commands:
dotnet run
dotnet build
dotnet new Console
dotnet new xunit
** Classes **

In C# class defines a new type, a type allows you to do things.

-examples of types: string, doubles.

1) How do you know when to create a new class?
you have to look and see when a method is too complex (too much functionality.)
this is when you should find a way to **encapsulate** the code into new classes to
be in specific to their functionality.


 -Every class and every type you write should be within a name space. If it's not,
it is in a global namespace and that is dangerous. someone else can put their own class in the global namespace and it can
cause conflicts in the program, for instance within the built-in dotnet libraries.

                    Examples of namespace being imported:
                    using System;
                    using System.Collections.Generic

When you're using Console.WriteLine() it is using the System namespace.


Namespace convention:
-it should be limited to one namespace per file.

Class convention:
-think of class as a blue print. it defines how you'll build objects.
-it should be limited to one class per file.
-what should be the behavior of this class? What can it do? What state will it hold(data structure)?
    ex: it can add, remove, and sort stuff.
-every class will have the same behavior, but objects within the class can have unique states.





**Unit Testing**

Purpose of unit tests are to Verify and Investigate Small Units of Code.



*** References vs Values ***

Reference is something being pointed to in memory, an object.
Value is something that would be referenced in memory, it is a value itself.


** Public Class Members Convention **

public class should always have an uppercase name.



Struct Vs. Classes

Struct: 

struct is a value type. ex: char
- light versions of classes. 
- are value types and can be used to create objects that behave like built-in types.
- Used only when you are sure that:
        -It logically represents a single value, like primitive types (int, double, etc.).
        -It is immutable.
        -It should not be boxed and un-boxed frequently.

Classes:
- are reference types, allocated on the heap and garbage-collected. 
- assignments of large reference types are cheaper than assignments of large value types.
- In classes, two variables can contain the reference of the same object and any operation on one variable can affect another variable.


Example of struct vs class:

e.g. Struct
struct Location   
{  
    publicint x, y;  
    publicLocation(int x, int y)  
    {  
        this.x = x;  
        this.y = y;  
    }  
}  
Locationa = new Location(20, 20);  
Locationb = a;  
a.x = 100;  
System.Console.WriteLine(b.x)  
;  

The output will be 20. Value of "b" is a copy of "a", so "b" is unaffected by change of "a.x". 
But in class, the output will be 100 because "a" and "b" will reference the same object.

*tip*
Press f12 while clicked on any reference.